---
AWSTemplateFormatVersion: 2010-09-09
Description: ECS cluster, ECS task/service stuff, load balancer and an Elasticsearch domain

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  LoadBalancerSubnets:
    Description: Choose all the public subnets in the VPC
    Type: List<AWS::EC2::Subnet::Id>
  LoadBalancerCertificateArn:
    Description: ARN of the ACM cert to use for the load balancer
    Type: String

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: shipit

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: shipit-ECSServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: read-write-elasticsearch
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - es:ESHttpGet
                - es:ESHttpHead
                - es:ESHttpPost
                - es:ESHttpPut
              Resource:
                - !GetAtt ElasticsearchDomain.DomainArn
                - !Sub "${ElasticsearchDomain.DomainArn}/*"
        -
          PolicyName: read-parameter-store
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ssm:Describe*'
                - 'ssm:List*'
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - 'ssm:Get*'
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/shipit.*"

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Shipit ECS service'
      VpcId: !Ref VPC

  # ECS service will only accept traffic from the load balancer
  LoadBalancerCanSendTrafficToECSService:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 9000
      ToPort: 9000
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Load balancer accepts traffic from everywhere,
  # and can only forward it to the ECS service
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Open port 443 to the world'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          DestinationSecurityGroupId: !Ref ECSServiceSecurityGroup
      VpcId: !Ref VPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: ovo-eng-services-logs
        - Key: access_logs.s3.prefix
          Value: !Sub "shipit/loadbalancer"
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        Ref: LoadBalancerSubnets

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/healthcheck'
      HealthCheckProtocol: HTTP
      Port: 9000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId:
        Ref: VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificateArn

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ECSTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      # TODO VPC config?
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
      ElasticsearchClusterConfig:
        InstanceCount: 2
        InstanceType: t2.small.elasticsearch
      ElasticsearchVersion: 5.5
      SnapshotOptions:
        AutomatedSnapshotStartHour: 1
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "es:*"
            Resource: "*"
      Tags:
        - Key: Service
          Value: shipit

